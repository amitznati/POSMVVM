//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POSEntities.Entities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    
    public partial class Order : ModelBase
    {
        public Order()
        {
            this.OrderLines = new HashSet<OrderLine>();
            this.Payments = new HashSet<Payment>();
            
        }
        [KeyAttribute]
        public int ID { get; set; }
        public System.DateTime PurchaseDate { get; set; }
        public decimal TotalPayment { get { return Math.Round(GetValue(() => TotalPayment), 2); } set { SetValue(() => TotalPayment, value); CalcTax(); } }

        public Nullable<int> CustomerID { get; set; }
        public int EmployeeID { get; set; }
        public bool IsCloseInZ { get; set; }
        public Nullable<int> Znum { get; set; }
        public int TaxID { get; set; }
        public int DailyNumber { get; set; }
        public int CashierID { get; set; }
        public int StoreID { get; set; }
    
        public virtual Cashier Cashier { get; set; }
        public virtual Customer Customer { get { return GetValue(() => Customer); } set { SetValue(() => Customer, value); } }
        public virtual Employee Employee { get { return GetValue(() => Employee); } set { SetValue(() => Employee, value); } }
        public virtual StoreInfo StoreInfo { get; set; }
		public virtual Tax Tax { get { return GetValue(() => Tax); } set { SetValue(() => Tax, value); CalcTax(); } }
        public virtual ZReport ZReport { get; set; }
        public virtual ICollection<OrderLine> OrderLines { get; set; }
        public virtual double TotalPaymentBeforeTax { get { return Math.Round(GetValue(() => TotalPaymentBeforeTax), 2); } set { SetValue(() => TotalPaymentBeforeTax, value); } }
        public virtual double TotalTax { get { return Math.Round(GetValue(() => TotalTax), 2); } set { SetValue(() => TotalTax, value); } }
        public virtual ICollection<Payment> Payments { get { return GetValue(() => Payments); } set { SetValue(() => Payments, value); } }
        private double totalPaymentBeforeTax
        {
            get
            {
                if (Tax == null) return 0;
                return (double)TotalPayment - totalTax;   
            }
        }
        private double totalTax
        {
            get
            {
                if (Tax == null) return 0;
                return (Tax.TaxPercentage / (100+Tax.TaxPercentage))*  (double)TotalPayment;
            }
        }

        private void CalcTax()
        {
            TotalPaymentBeforeTax = totalPaymentBeforeTax;
            TotalTax = totalTax;
        }

    }
}
